// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(uuid())
  role                 Role
  email                String        @unique
  password             String
  name                 String
  dp                   String?       @db.VarChar(500)
  about                String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  applicationsReceived Application[] @relation("ApplicationToRelation")
  applications         Application[] @relation("ApplicantRelation")
  Application          Application[]
}

model Shelf {
  id       String  @id @default(uuid())
  shelfNum String  @unique
  items    Items[]
}

model Items {
  id            String       @id @default(uuid())
  name          String       @unique
  quantity      Int
  image         String?
  location      Shelf        @relation(fields: [locationId], references: [id])
  locationId    String
  Application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?
}

model Application {
  id              String            @id @default(uuid())
  applicant       User              @relation("ApplicantRelation", fields: [applicantId], references: [id])
  applicantId     String
  applicationTo   User              @relation("ApplicationToRelation", fields: [applicationToId], references: [id])
  applicationToId String
  type            ApplicationType
  subject         String
  body            String
  status          ApplicationStatus @default(Pending)
  phase           ApplicationPhase
  User            User?             @relation(fields: [userId], references: [id])
  userId          String?
  items           Items[]
  itemsId         String[]
  quantity        Json
}

model Account {
  id      String @id @default(uuid())
  balance Float
}

model Transaction {
  id        String          @id @default(uuid())
  type      TransactionType
  details   String
  amount    Float
  documents Document[]
}

model Document {
  id            String      @id @default(uuid())
  content       String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
}

enum Role {
  store_manager
  dept_head
  teacher
  lab_assistant
  officials
}

enum ApplicationType {
  give
  take
}

enum ApplicationStatus {
  Pending
  Approved
}

enum ApplicationPhase {
  sent_to_store_manager
  sent_to_head
  approved_by_head
  approved_by_store_manager
}

enum TransactionType {
  expense
  income
}
